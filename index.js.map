{
  "version": 3,
  "sources": ["../node_modules/rfc4648/lib/index.js", "../src/crypto.ts", "../node_modules/rfc4648/lib/index.mjs", "../node_modules/@cfworker/base64url/dist/decode.js", "../node_modules/@cfworker/base64url/dist/encode.js", "../src/utils.ts", "../src/client/api.ts", "../src/client/index.ts"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n\n  var end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = opts,\n      _opts$pad = _opts.pad,\n      pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\n\nexports.base16 = base16;\nexports.base32 = base32;\nexports.base32hex = base32hex;\nexports.base64 = base64;\nexports.base64url = base64url;\nexports.codec = codec;\n", "export enum Digests {\n    SHA256 = 'SHA-256',\n    SHA384 = 'SHA-384',\n    SHA512 = 'SHA-512',\n}\n\nexport enum SigningAlg {\n    ECDSA = 'ECDSA',\n}\n\nexport enum COSEAlgorithm {\n    ES256 = -7,\n    ES384 = -35,\n    ES512 = -36,\n    // RS256 = -257,\n    // RS384 = -258,\n    // RS512 = -259,\n}\n\nexport enum SigningCurve {\n    P256 = 'P-256',\n    P384 = 'P-384',\n    P512 = 'P-512',\n}\n\nexport const COSEAlgToDigest = {\n    [COSEAlgorithm.ES256.toString()]: Digests.SHA256,\n    [COSEAlgorithm.ES384.toString()]: Digests.SHA384,\n    [COSEAlgorithm.ES512.toString()]: Digests.SHA512,\n};\n\nexport const COSEAlgToSigningCurve = {\n    [COSEAlgorithm.ES256.toString()]: SigningCurve.P256,\n    [COSEAlgorithm.ES384.toString()]: SigningCurve.P384,\n    [COSEAlgorithm.ES512.toString()]: SigningCurve.P512,\n};\n\nexport const COSEAlgToSigningAlg = {\n    [COSEAlgorithm.ES256.toString()]: SigningAlg.ECDSA,\n    [COSEAlgorithm.ES384.toString()]: SigningAlg.ECDSA,\n    [COSEAlgorithm.ES512.toString()]: SigningAlg.ECDSA,\n};\n\nexport class Crypto {\n    static async toCryptoKey(\n        pubKey: ArrayBuffer,\n        name: SigningAlg,\n        namedCurve: SigningCurve\n    ) {\n        return await crypto.subtle.importKey(\n            'spki',\n            pubKey,\n            { name, namedCurve },\n            true,\n            ['verify']\n        );\n    }\n}\n", "// Generated by rollup-plugin-mjs-entry\n\nimport cjs from './index.js';\n\nexport const base16 = cjs.base16;\nexport const base32 = cjs.base32;\nexport const base32hex = cjs.base32hex;\nexport const base64 = cjs.base64;\nexport const base64url = cjs.base64url;\nexport const codec = cjs.codec;\nexport default cjs;\n", "import { base64url } from 'rfc4648';\nexport function decode(s) {\n    return new TextDecoder().decode(base64url.parse(s, { loose: true }));\n}\n", "import { base64url } from 'rfc4648';\nexport function encode(s) {\n    return base64url.stringify(new TextEncoder().encode(s), { pad: false });\n}\n", "import {\n    decode as _fromBase64Url,\n    encode as _toBase64Url,\n} from '@cfworker/base64url';\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nexport const encode = encoder.encode.bind(encoder);\nexport const decode = decoder.decode.bind(decoder);\n\nconst byteStringToBuffer = (byteString: string) =>\n    Uint8Array.from(byteString, (e) => e.charCodeAt(0)).buffer;\n\nconst bufferToByteString = (buffer: ArrayBuffer) =>\n    String.fromCharCode(...new Uint8Array(buffer));\n\nexport const toBase64Url = _toBase64Url;\nexport const fromBase64Url = _fromBase64Url;\nexport const marshal = (data: object) => toBase64Url(JSON.stringify(data));\nexport const unmarshal = (data: string) => JSON.parse(fromBase64Url(data));\n\nexport const safeEncode = (data: string) => encode(fromBase64Url(data));\nexport const safeDecode = (data: ArrayBuffer) => toBase64Url(decode(data));\nexport const safeByteEncode = (data: string) =>\n    byteStringToBuffer(fromBase64Url(data));\nexport const safeByteDecode = (data: ArrayBuffer) =>\n    toBase64Url(bufferToByteString(data));\n\nexport function concatBuffer(buffer1: ArrayBuffer, buffer2: ArrayBuffer) {\n    let tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp.buffer;\n}\n\nexport enum WebAuthnType {\n    Create = 'webauthn.create',\n    Get = 'webauthn.get',\n}\n", "import * as schema from '../server/schema.js';\nimport { safeByteDecode } from '../utils.js';\n\nconst makeRequest = (endpoint: string, data: object = {}) =>\n    fetch(\n        new Request(`https://api.passkeys.workers.dev/${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n            credentials: 'include',\n        })\n    );\n\nexport namespace Attestation {\n    export async function generate(userId: string) {\n        const response = await makeRequest('attestation/generate', {\n            userId,\n        } as schema.Attestation.ChallengePayload);\n        return (await response.json()) as schema.Attestation.ChallengeResponse;\n    }\n\n    export async function store(credential: PublicKeyCredential) {\n        const attestation =\n            credential.response as AuthenticatorAttestationResponse;\n\n        const payload: schema.Attestation.StoreCredentialPayload = {\n            kid: credential.id,\n            clientDataJSON: safeByteDecode(attestation.clientDataJSON),\n            attestationObject: safeByteDecode(attestation.attestationObject),\n            pubkey: safeByteDecode(attestation.getPublicKey() as ArrayBuffer),\n            coseAlg: attestation.getPublicKeyAlgorithm(),\n        };\n\n        const response = await makeRequest('attestation/store', payload);\n        return (await response.json()) as schema.Attestation.StoreCredentialResponse;\n    }\n}\n\nexport namespace Assertion {\n    export async function generate() {\n        const response = await makeRequest(\n            'assertion/generate',\n            {} as schema.Assertion.ChallengePayload\n        );\n        return (await response.json()) as schema.Assertion.ChallengeResponse;\n    }\n\n    export async function verify(credential: PublicKeyCredential) {\n        const assertion = credential.response as AuthenticatorAssertionResponse;\n        const payload: schema.Assertion.VerifyPayload = {\n            kid: credential.id,\n            clientDataJSON: safeByteDecode(assertion.clientDataJSON),\n            authenticatorData: safeByteDecode(assertion.authenticatorData),\n            signature: safeByteDecode(assertion.signature),\n        };\n        const response = await makeRequest('assertion/verify', payload);\n        return (await response.json()) as schema.Assertion.VerifyResponse;\n    }\n}\n", "import { COSEAlgorithm } from '../crypto.js';\nimport { encode, safeEncode } from '../utils.js';\nimport * as api from './api.js';\n\nif (\n    window.PublicKeyCredential // &&\n    // (await PublicKeyCredential?.isUserVerifyingPlatformAuthenticatorAvailable?.())\n    // && await PublicKeyCredential?.isConditionalMediationAvailable?.())\n) {\n    async function attestation(\n        abortController: AbortController,\n        username: string\n    ) {\n        const userId = crypto.randomUUID();\n        const { challenge } = await api.Attestation.generate(userId);\n        const publicKey: PublicKeyCredentialCreationOptions = {\n            challenge: safeEncode(challenge),\n            rp: {\n                id: window.location.host,\n                name: document.title,\n            },\n            user: {\n                id: encode(userId),\n                name: username,\n                displayName: '',\n            },\n            pubKeyCredParams: [\n                {\n                    type: 'public-key',\n                    alg: COSEAlgorithm.ES512,\n                },\n                {\n                    type: 'public-key',\n                    alg: COSEAlgorithm.ES384,\n                },\n                {\n                    type: 'public-key',\n                    alg: COSEAlgorithm.ES256,\n                },\n            ],\n            authenticatorSelection: {\n                userVerification: 'preferred',\n                residentKey: 'required',\n            },\n            attestation: 'indirect',\n            timeout: 60_000,\n        };\n\n        const credential = (await window.navigator.credentials.create({\n            publicKey,\n            signal: abortController.signal,\n        })) as PublicKeyCredential;\n        return await api.Attestation.store(credential);\n    }\n\n    async function assertion(abortController: AbortController) {\n        const { challenge } = await api.Assertion.generate();\n        const publicKey: PublicKeyCredentialRequestOptions = {\n            challenge: safeEncode(challenge),\n            rpId: window.location.host,\n            timeout: 60_000,\n        };\n        const credential = (await window.navigator.credentials.get({\n            publicKey,\n            signal: abortController.signal,\n            mediation: 'optional',\n        })) as PublicKeyCredential;\n        return await api.Assertion.verify(credential);\n    }\n\n    const cancelButton = document.querySelector('button#cancel');\n    const output = document.querySelector(\n        'textarea#output'\n    ) as HTMLTextAreaElement;\n\n    const submit = (fn: CallableFunction) => async (e: Event) => {\n        e.preventDefault();\n        const data = new FormData(\n            document.querySelector('form#passkeys') as HTMLFormElement\n        );\n        const abortController = new AbortController();\n        cancelButton?.addEventListener('click', abortController.abort, {\n            once: true,\n            signal: abortController.signal,\n        });\n        const response = await fn(\n            abortController,\n            data.get('username') as string\n        );\n        if (output) {\n            output.value = JSON.stringify(response, undefined, 4);\n        }\n        abortController.abort();\n    };\n\n    document\n        .querySelector('form#passkeys button#signup')\n        ?.addEventListener('click', submit(attestation));\n\n    document\n        .querySelector('form#passkeys button#login')\n        ?.addEventListener('click', submit(assertion));\n}\n"],
  "mappings": "ygBAAA,IAAAA,EAAAC,EAAAC,GAAA,cAEA,OAAO,eAAeA,EAAS,aAAc,CAAE,MAAO,EAAK,CAAC,EAG5D,SAASC,EAAMC,EAAQC,EAAUC,EAAM,CACrC,IAAIC,EAOJ,GALID,IAAS,SACXA,EAAO,CAAC,GAIN,CAACD,EAAS,MAAO,CACnBA,EAAS,MAAQ,CAAC,EAElB,QAASG,EAAI,EAAGA,EAAIH,EAAS,MAAM,OAAQ,EAAEG,EAC3CH,EAAS,MAAMA,EAAS,MAAMG,CAAC,CAAC,EAAIA,CAExC,CAGA,GAAI,CAACF,EAAK,OAASF,EAAO,OAASC,EAAS,KAAO,EACjD,MAAM,IAAI,YAAY,iBAAiB,EAMzC,QAFII,EAAML,EAAO,OAEVA,EAAOK,EAAM,CAAC,IAAM,KAGzB,GAFA,EAAEA,EAEE,CAACH,EAAK,OAAS,GAAGF,EAAO,OAASK,GAAOJ,EAAS,KAAO,GAC3D,MAAM,IAAI,YAAY,iBAAiB,EAa3C,QARIK,EAAM,KAAMH,EAAYD,EAAK,MAAQ,KAAOC,EAAY,YAAYE,EAAMJ,EAAS,KAAO,EAAI,CAAC,EAE/FM,EAAO,EAEPC,EAAS,EAETC,EAAU,EAELC,EAAK,EAAGA,EAAKL,EAAK,EAAEK,EAAI,CAE/B,IAAIC,EAAQV,EAAS,MAAMD,EAAOU,CAAE,CAAC,EAErC,GAAIC,IAAU,OACZ,MAAM,IAAI,YAAY,qBAAuBX,EAAOU,CAAE,CAAC,EAIzDF,EAASA,GAAUP,EAAS,KAAOU,EACnCJ,GAAQN,EAAS,KAEbM,GAAQ,IACVA,GAAQ,EACRD,EAAIG,GAAS,EAAI,IAAOD,GAAUD,EAEtC,CAGA,GAAIA,GAAQN,EAAS,MAAQ,IAAOO,GAAU,EAAID,EAChD,MAAM,IAAI,YAAY,wBAAwB,EAGhD,OAAOD,CACT,CACA,SAASM,EAAUC,EAAMZ,EAAUC,EAAM,CACnCA,IAAS,SACXA,EAAO,CAAC,GAYV,QATIY,EAAQZ,EACRa,EAAYD,EAAM,IAClBE,EAAMD,IAAc,OAAS,GAAOA,EACpCE,GAAQ,GAAKhB,EAAS,MAAQ,EAC9BK,EAAM,GACNC,EAAO,EAEPC,EAAS,EAEJJ,EAAI,EAAGA,EAAIS,EAAK,OAAQ,EAAET,EAKjC,IAHAI,EAASA,GAAU,EAAI,IAAOK,EAAKT,CAAC,EACpCG,GAAQ,EAEDA,EAAON,EAAS,MACrBM,GAAQN,EAAS,KACjBK,GAAOL,EAAS,MAAMgB,EAAOT,GAAUD,CAAI,EAU/C,GALIA,IACFD,GAAOL,EAAS,MAAMgB,EAAOT,GAAUP,EAAS,KAAOM,CAAI,GAIzDS,EACF,KAAOV,EAAI,OAASL,EAAS,KAAO,GAClCK,GAAO,IAIX,OAAOA,CACT,CAGA,IAAIY,EAAiB,CACnB,MAAO,mBACP,KAAM,CACR,EACIC,EAAiB,CACnB,MAAO,mCACP,KAAM,CACR,EACIC,EAAoB,CACtB,MAAO,mCACP,KAAM,CACR,EACIC,EAAiB,CACnB,MAAO,mEACP,KAAM,CACR,EACIC,EAAoB,CACtB,MAAO,mEACP,KAAM,CACR,EACIC,EAAS,CACX,MAAO,SAAiBvB,EAAQE,EAAM,CACpC,OAAOH,EAAMC,EAAO,YAAY,EAAGkB,EAAgBhB,CAAI,CACzD,EACA,UAAW,SAAqBW,EAAMX,EAAM,CAC1C,OAAOU,EAAUC,EAAMK,EAAgBhB,CAAI,CAC7C,CACF,EACIsB,EAAS,CACX,MAAO,SAAiBxB,EAAQE,EAAM,CACpC,OAAIA,IAAS,SACXA,EAAO,CAAC,GAGHH,EAAMG,EAAK,MAAQF,EAAO,YAAY,EAAE,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EAAIA,EAAQmB,EAAgBjB,CAAI,CACxI,EACA,UAAW,SAAqBW,EAAMX,EAAM,CAC1C,OAAOU,EAAUC,EAAMM,EAAgBjB,CAAI,CAC7C,CACF,EACIuB,EAAY,CACd,MAAO,SAAiBzB,EAAQE,EAAM,CACpC,OAAOH,EAAMC,EAAQoB,EAAmBlB,CAAI,CAC9C,EACA,UAAW,SAAqBW,EAAMX,EAAM,CAC1C,OAAOU,EAAUC,EAAMO,EAAmBlB,CAAI,CAChD,CACF,EACIwB,EAAS,CACX,MAAO,SAAiB1B,EAAQE,EAAM,CACpC,OAAOH,EAAMC,EAAQqB,EAAgBnB,CAAI,CAC3C,EACA,UAAW,SAAqBW,EAAMX,EAAM,CAC1C,OAAOU,EAAUC,EAAMQ,EAAgBnB,CAAI,CAC7C,CACF,EACIyB,EAAY,CACd,MAAO,SAAiB3B,EAAQE,EAAM,CACpC,OAAOH,EAAMC,EAAQsB,EAAmBpB,CAAI,CAC9C,EACA,UAAW,SAAqBW,EAAMX,EAAM,CAC1C,OAAOU,EAAUC,EAAMS,EAAmBpB,CAAI,CAChD,CACF,EACI0B,EAAQ,CACV,MAAO7B,EACP,UAAWa,CACb,EAEAd,EAAQ,OAASyB,EACjBzB,EAAQ,OAAS0B,EACjB1B,EAAQ,UAAY2B,EACpB3B,EAAQ,OAAS4B,EACjB5B,EAAQ,UAAY6B,EACpB7B,EAAQ,MAAQ8B,ICjKT,IAAMC,EAAkB,CAC3B,CAAC,KAAoB,SAAS,CAAC,EAAG,UAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,UAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,SACtC,EAEaC,GAAwB,CACjC,CAAC,KAAoB,SAAS,CAAC,EAAG,QAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,QAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,OACtC,EAEaC,GAAsB,CAC/B,CAAC,KAAoB,SAAS,CAAC,EAAG,QAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,QAClC,CAAC,MAAoB,SAAS,CAAC,EAAG,OACtC,ECvCA,IAAAC,EAAgB,SAEHC,GAAS,EAAAC,QAAI,OACbC,GAAS,EAAAD,QAAI,OACbE,GAAY,EAAAF,QAAI,UAChBG,GAAS,EAAAH,QAAI,OACbI,EAAY,EAAAJ,QAAI,UAChBK,GAAQ,EAAAL,QAAI,MCRlB,SAASM,EAAOC,EAAG,CACtB,OAAO,IAAI,YAAY,EAAE,OAAOC,EAAU,MAAMD,EAAG,CAAE,MAAO,EAAK,CAAC,CAAC,CACvE,CCFO,SAASE,EAAOC,EAAG,CACtB,OAAOC,EAAU,UAAU,IAAI,YAAY,EAAE,OAAOD,CAAC,EAAG,CAAE,IAAK,EAAM,CAAC,CAC1E,CCEA,IAAME,EAAU,IAAI,YACdC,EAAU,IAAI,YACPC,EAASF,EAAQ,OAAO,KAAKA,CAAO,EACpCG,GAASF,EAAQ,OAAO,KAAKA,CAAO,EAKjD,IAAMG,EAAsBC,GACxB,OAAO,aAAa,GAAG,IAAI,WAAWA,CAAM,CAAC,EAEpCC,EAAcC,EACdC,EAAgBC,EAItB,IAAMC,EAAcC,GAAiBC,EAAOC,EAAcF,CAAI,CAAC,EAI/D,IAAMG,EAAkBC,GAC3BC,EAAYC,EAAmBF,CAAI,CAAC,ECvBxC,IAAMG,EAAc,CAACC,EAAkBC,EAAe,CAAC,IACnD,MACI,IAAI,QAAQ,oCAAoCD,IAAY,CACxD,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAUC,CAAI,EACzB,YAAa,SACjB,CAAC,CACL,EAEaC,MAAV,CACH,eAAsBC,EAASC,EAAgB,CAI3C,OAAQ,MAHS,MAAML,EAAY,uBAAwB,CACvD,OAAAK,CACJ,CAAwC,GACjB,KAAK,CAChC,CALAF,EAAsB,SAAAC,EAOtB,eAAsBE,EAAMC,EAAiC,CACzD,IAAMC,EACFD,EAAW,SAETE,EAAqD,CACvD,IAAKF,EAAW,GAChB,eAAgBG,EAAeF,EAAY,cAAc,EACzD,kBAAmBE,EAAeF,EAAY,iBAAiB,EAC/D,OAAQE,EAAeF,EAAY,aAAa,CAAgB,EAChE,QAASA,EAAY,sBAAsB,CAC/C,EAGA,OAAQ,MADS,MAAMR,EAAY,oBAAqBS,CAAO,GACxC,KAAK,CAChC,CAdAN,EAAsB,MAAAG,IARTH,IAAA,IAyBV,IAAUQ,MAAV,CACH,eAAsBP,GAAW,CAK7B,OAAQ,MAJS,MAAMJ,EACnB,qBACA,CAAC,CACL,GACuB,KAAK,CAChC,CANAW,EAAsB,SAAAP,EAQtB,eAAsBQ,EAAOL,EAAiC,CAC1D,IAAMM,EAAYN,EAAW,SACvBE,EAA0C,CAC5C,IAAKF,EAAW,GAChB,eAAgBG,EAAeG,EAAU,cAAc,EACvD,kBAAmBH,EAAeG,EAAU,iBAAiB,EAC7D,UAAWH,EAAeG,EAAU,SAAS,CACjD,EAEA,OAAQ,MADS,MAAMb,EAAY,mBAAoBS,CAAO,GACvC,KAAK,CAChC,CAVAE,EAAsB,OAAAC,IATTD,IAAA,ICpCjB,GACI,OAAO,oBAGT,CACE,eAAeG,EACXC,EACAC,EACF,CACE,IAAMC,EAAS,OAAO,WAAW,EAC3B,CAAE,UAAAC,CAAU,EAAI,MAAUC,EAAY,SAASF,CAAM,EACrDG,EAAgD,CAClD,UAAWC,EAAWH,CAAS,EAC/B,GAAI,CACA,GAAI,OAAO,SAAS,KACpB,KAAM,SAAS,KACnB,EACA,KAAM,CACF,GAAII,EAAOL,CAAM,EACjB,KAAMD,EACN,YAAa,EACjB,EACA,iBAAkB,CACd,CACI,KAAM,aACN,OACJ,EACA,CACI,KAAM,aACN,OACJ,EACA,CACI,KAAM,aACN,MACJ,CACJ,EACA,uBAAwB,CACpB,iBAAkB,YAClB,YAAa,UACjB,EACA,YAAa,WACb,QAAS,GACb,EAEMO,EAAc,MAAM,OAAO,UAAU,YAAY,OAAO,CAC1D,UAAAH,EACA,OAAQL,EAAgB,MAC5B,CAAC,EACD,OAAO,MAAUI,EAAY,MAAMI,CAAU,CACjD,CAEA,eAAeC,EAAUT,EAAkC,CACvD,GAAM,CAAE,UAAAG,CAAU,EAAI,MAAUO,EAAU,SAAS,EAC7CL,EAA+C,CACjD,UAAWC,EAAWH,CAAS,EAC/B,KAAM,OAAO,SAAS,KACtB,QAAS,GACb,EACMK,EAAc,MAAM,OAAO,UAAU,YAAY,IAAI,CACvD,UAAAH,EACA,OAAQL,EAAgB,OACxB,UAAW,UACf,CAAC,EACD,OAAO,MAAUU,EAAU,OAAOF,CAAU,CAChD,CAEA,IAAMG,EAAe,SAAS,cAAc,eAAe,EACrDC,EAAS,SAAS,cACpB,iBACJ,EAEMC,EAAUC,GAAyB,MAAOC,GAAa,CACzDA,EAAE,eAAe,EACjB,IAAMC,EAAO,IAAI,SACb,SAAS,cAAc,eAAe,CAC1C,EACMhB,EAAkB,IAAI,gBAC5BW,GAAc,iBAAiB,QAASX,EAAgB,MAAO,CAC3D,KAAM,GACN,OAAQA,EAAgB,MAC5B,CAAC,EACD,IAAMiB,EAAW,MAAMH,EACnBd,EACAgB,EAAK,IAAI,UAAU,CACvB,EACIJ,IACAA,EAAO,MAAQ,KAAK,UAAUK,EAAU,OAAW,CAAC,GAExDjB,EAAgB,MAAM,CAC1B,EAEA,SACK,cAAc,6BAA6B,GAC1C,iBAAiB,QAASa,EAAOd,CAAW,CAAC,EAEnD,SACK,cAAc,4BAA4B,GACzC,iBAAiB,QAASc,EAAOJ,CAAS,CAAC,CACrD",
  "names": ["require_lib", "__commonJSMin", "exports", "parse", "string", "encoding", "opts", "_opts$out", "i", "end", "out", "bits", "buffer", "written", "_i", "value", "stringify", "data", "_opts", "_opts$pad", "pad", "mask", "base16Encoding", "base32Encoding", "base32HexEncoding", "base64Encoding", "base64UrlEncoding", "base16", "base32", "base32hex", "base64", "base64url", "codec", "COSEAlgToDigest", "COSEAlgToSigningCurve", "COSEAlgToSigningAlg", "import_index", "base16", "cjs", "base32", "base32hex", "base64", "base64url", "codec", "decode", "s", "base64url", "encode", "s", "base64url", "encoder", "decoder", "encode", "decode", "bufferToByteString", "buffer", "toBase64Url", "encode", "fromBase64Url", "decode", "safeEncode", "data", "encode", "fromBase64Url", "safeByteDecode", "data", "toBase64Url", "bufferToByteString", "makeRequest", "endpoint", "data", "Attestation", "generate", "userId", "store", "credential", "attestation", "payload", "safeByteDecode", "Assertion", "verify", "assertion", "attestation", "abortController", "username", "userId", "challenge", "Attestation", "publicKey", "safeEncode", "encode", "credential", "assertion", "Assertion", "cancelButton", "output", "submit", "fn", "e", "data", "response"]
}
